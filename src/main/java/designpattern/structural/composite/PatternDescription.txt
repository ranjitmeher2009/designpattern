Composite design patterns describe groups of objects that can be treated in the same way as a single instance of the same object type.
The composite pattern allows us to "compose" objects into tree structures to represent part-whole hierarchies.

Definition:

Intent:
Compose objects into tree structures to represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.
Recursive composition
"Directories contain entries, each of which could be a directory."
1-to-many "has a" up the "is a" hierarchy

What is Whole-part Hierarchy :
 A system consists of subsystems or components. Components can further be divided into smaller components.
 Further smaller components can be divided into smaller elements. This is a part-whole hierarchy.

Problem:
Application needs to manipulate a hierarchical collection of "primitive" and "composite" objects.
Processing of a primitive object is handled one way, and processing of a composite object is handled differently.
Having to query the "type" of each object before attempting to process it is not desirable.

Tree for Composite

When we get a recursive structure the obvious choice for implementation is a tree.
In composite design pattern, the part-whole hierarchy can be represented as a tree.
Leaves (end nodes) of a tree being the primitive elements and the tree being the composite structure.


Uml Design for Composite Pattern

Component: (structure)

    Component is at the top of hierarchy. It is an abstraction for the composite.
    It declares the interface for objects in composition.
    (optional) defines an interface for accessing a component’s parent in the recursive structure, and implements it if that’s appropriate.

Leaf: (primitive blocks)

    The end nodes of the tree and will not have any child.
    Defines the behaviour for single objects in the composition

Composite: (group)

    Consists of child components and defines behaviour for them
    Implements the child related operations.



Important Points:
Recursive formation and tree structure for composite should be noted.
Clients access the whole hierarchy through the components and they are not aware about if they are dealing with leaf or composites.
Importance of composite pattern is, the group of objects should be treated similarly as a single object.
Being able to treat a heterogeneous collection of objects atomically (or transparently) requires that the "child management" interface
be defined at the root of the Composite class hierarchy (the abstract Component class). However, this choice costs you safety,
because clients may try to do meaningless things like add and remove objects from leaf objects.

On the other hand, if you "design for safety", the child management interface is declared in the Composite class,
and you lose transparency because leaves and Composites now have different interfaces.

Rules of thumb
Composite and Decorator have similar structure diagrams, reflecting the fact that both rely on recursive composition to organize an open-ended number of objects.
Decorator is designed to let you add responsibilities to objects without subclassing. Composite's focus is not on embellishment but on representation.
These intents are distinct but complementary. Consequently, Composite and Decorator are often used in concert.

The composite pattern is meant to "compose objects into a tree structure to represent part-whole hierarchies.
Composite lets clients treat individual objects and compositions of objects uniformly"

Composite design patterns describe groups of objects that can be treated in the same way as a single instance of the same object type.
The composite pattern allows us to "compose" objects into tree structures to represent part-whole hierarchies.
In addition, the composite patterns also allow our clients to treat individual objects and compositions in the same way.
Composite patterns allow us to have a tree structure for each node that performs a task.
In object-oriented programming, a composite is an object designed as a composition of one-or-more similar objects, all exhibiting similar functionality.
This is known as a “has-a” relationship between objects.
Below is the list of classes/objects used in the composite pattern, which has four :

Component – Component is the interface (or abstract class) for the composition of the objects and methods for accessing/processing its child or node components.
It also implements a default interface to define common functionality/behaviors for all component classes.

Leaf – The leaf class defines a concrete component class, which does not have any further composition. The leaf class implements the component interface.
It performs the command/task at its end only.

Composite – The composite class defines a concrete component class, which stores its child components.
The composite class implements the component interface. It forwards the command/task to the composite objects it contains.
It may also perform additional operations before and after forwarding the command/task.

Client – The client class uses the component interface to interact/manipulate the objects in the composition (Leaf and Composite).
To better understand this, let's take a look at an example of employees working in an organization.